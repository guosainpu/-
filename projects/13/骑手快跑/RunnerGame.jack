
class RunnerGame {

    static RunnerGame instance;    // 游戏单例

    field  Runner     runner;             // 骑手
    field  Food       food;               // 食物
    field  House      house;              // 配送地点
    
    field  int        runnerX, runnerY;   // 骑手当前位置
    field  int        foodX, foodY;       // 食物当前位置
    field  int        houseX, houseY;     // 房屋当前位置
    field  boolean    picked;             // 是否取到货
    field  int        score;              // 挣到的钱

    field  boolean    exit;               // 游戏结束

    constructor RunnerGame new() {
	    do Screen.clearScreen();

	    let runnerX = 230;
	    let runnerY = 120;
	    let foodX = 100;
	    let foodY = 200;
	    let houseX = 200;
	    let houseY = 100;

	    let runner = Runner.new(runnerX, runnerY);
	    let house = House.new(houseX, houseY);
	    let food = Food.new(foodX, foodY);

	    let picked = false;
	    let score = 0;
	    let exit = false;

	    // 底部分数分数记录区
        do Screen.drawRectangle(0, 238, 511, 240);
	    do Output.moveCursor(22,0);
	    do Output.printString("money: 0");
	
        return this;
    }

    method void dispose() {
        do runner.dispose();
	    do food.dispose();
	    do house.dispose();
        do Memory.deAlloc(this);

        return;
    }

    function void newInstance() {
        let instance = RunnerGame.new();
        return;
    }
    
    function RunnerGame getInstance() {
        return instance;
    }

    // 开始游戏。用键盘控制骑手位置，先取货，再送货，然后获得奖励
    method void run() {
        var char key;
        while (~exit) {
            // 等待按下按键
            while ((key = 0) & (~exit)) {
                let key = Keyboard.keyPressed();
                do Sys.wait(50);
            }

            do moveRunner(key);

            // 等待按键松开
            while ((~(key = 0)) & (~exit)) {
                let key = Keyboard.keyPressed();
                do Sys.wait(50);
            }

            do updateStatus();
            do reDraw();
        }

	    if (exit) {
            do Output.moveCursor(1,27);
	        do Output.printString("Congratulations!");
	    }
            
        return;
    }

    method void moveRunner(int key) {
        // 左 = 130，上 = 131，右 = 132，下 = 133
        if (key = 130) { 
        	let runnerX = runnerX - 1;
        } else {
            if (key = 131) { 
            	let runnerY = runnerY - 1;
            } else {
                if (key = 132) {
                let runnerX = runnerX + 1;
                } else {
                	if (key = 133) {
                		let runnerY = runnerY + 1;
                	}
                }
	        }
        }

        // 防止越界
        if (runnerX > 490) {
        	let runnerX = 490;
        }
        if (runnerY > 236) {
        	let runnerY = 236;
        }

        do runner.moveTo(runnerX, runnerY);

        return;
    }

    method void updateStatus() {
    	// 取到食物
    	if ((Math.abs(foodX - runnerX) < 20) | (Math.abs(foodY - runnerY) < 20)) {
    		let picked = true;
    		do runner.setPicked(picked);
    	}

    	// 送到食物
    	if (picked & ((Math.abs(houseX - runnerX) < 20) | (Math.abs(houseY - runnerY) < 20)) ) {
    		let score = score + 10;
    		if (score = 100) {
    			let exit = true;
    		}

    		let picked = false;
    		do runner.setPicked(picked);

    		do newRound();
    	}

    	return;
    }

    // 完成一次配送，更新食物和房屋的位置
    method void newRound() {
    	// 更新位置
    	let foodX = Math.mod(foodX * houseX , 490);
    	let foodY = Math.mod(foodY * houseY , 236);
    	let houseX = Math.mod(foodY * houseX , 490);
    	let houseY = Math.mod(houseX * foodY , 236);

    	do food.moveTo(foodX, foodY);
    	do house.moveTo(houseX, houseY);

    	return;
    }

    // 重新绘制
    method void reDraw() {
    	do runner.show();
    	do house.show();
    	if (picked) {
    		do food.hide();    		
    	} else {
 			do food.show();   		
    	}

    	do Output.moveCursor(22,7);
        do Output.printInt(score);

        return;
    }
}